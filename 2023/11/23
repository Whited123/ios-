2023 / 11 / 23

오늘 배운 것:

1. 코드 테스트
    1.1 로또 번호 최소값 최대값
        1.1.1 코드
            import Foundation

func pandokgi(_ number:Int) -> Int {
    switch number {
        case 6: return 1
        case 5: return 2
        case 4: return 3
        case 3: return 4
        case 2: return 5
        default: return 6
    }
}

func solution(_ lottos:[Int], _ win_nums:[Int]) -> [Int] {
    var countLotto = 0
    var countZero = 0
    for i in lottos {
        if i == 0 {
            countZero += 1
        } else if win_nums.contains(i) {
            countLotto += 1
        }
    }
    let maxRank = pandokgi(countLotto + countZero)
    let minRank = pandokgi(countLotto)
    return [maxRank, minRank]
}

        1.1.2 문제 리뷰
            정수로 된 배열 lottos와 win_nums가 주어지는데, lottos와 win_nums는 임의의 1부터 45까지의 숫자 여섯개로 이루어져있고, lottos에 있는 0은 알수없는 숫자라고 할때, 당첨번호인 win_nums와 비교하여 lottos가 달성할수있는 가장 
            높은 등수와 낮은 등수를 반환해야 한다.
            우선 당첨된 숫자와 알수없는 숫자인 0을 셀 수있게 변수들을 할당하고, 반복문을 실행하여 lottos의 요소들을 순회한다. 만약 0이면 countZero에 1을 더하고, 당첨번호에 해당 요소가 있을경우 countLotto에 1을 더한다.
            그런 다음 switch구문을 사용하여 경우의 수를 대응시킨 함수 pandokgi를 사용하여 각각 최고등수와 최저등수를 계산하고 이를 return해주면 완성.

        1.1.3 개인적인 리뷰
            로또 번호 몇개가 가려진 상태에서 경우의 수를 계산해내야하는 문제이다. 
            처음에는 당첨번호에 해당 번호가 있는지 판별한 후에 반복문 두개를 써서 0을 당첨번호안에 있는 숫자로 바꾸는, Set과 subtracting을 사용해서 배열의 중복을 비교하고, 그런다음 first함수와 firstIndex(of:)를 사용해서
            로또 번호에 있는 숫자를 가져오는 방법을 쓰려고 했지만 이는 0을 아예 대체해서 등수를 계산하는 방법은 코드가 가독성이 떨어지고 그렇게 할 필요가 없다는 걸 깨달았다.
            맞힌 갯수와 0의 갯수를 세고 최고등수는 0이 전부 당첨일 경우, 최저는 0이 전부 틀렸을 경우를 계산하면 되기에 중복을 검사할 필요가 없었다.
            switch함수를 사용해서 들어오는 입력값에 따라 대응 되는 경우의 수를 저장해놓는 방법을 사용했고 공부가 되었다.
            나중에 중복을 대비해야하는 경우가 나올수 있기때문에 Set함수를 사용한것도 좋은 시도였고 switch함수에 대해 공부 할수있었기때문에 만족스러운 문제였다.

    1.2 옹알이
        1.2.1 코드
            import Foundation

func solution(_ babbling: [String]) -> Int {
    let defaultBabble = Set(["aya", "ye", "woo", "ma"])
    var result = 0

    for i in babbling {
        var valid = true 
        var sameChar:Character = " "
        
        if !defaultBabble.contains { i.hasPrefix($0) } {
            valid = false
        }
        
        for y in defaultBabble { 
            if i.contains(y + y) {
                valid = false
                break
            }
        }
        
        if valid {
            var pandokgi:Character = i.first ?? " "
            for z in i.indices.dropFirst() {
                let middleChar = i[z]
                if middleChar != "o", pandokgi == middleChar {
                    valid = false
                    break
                }
                pandokgi = middleChar
            }
        }
        
        if valid {
            result += 1
        }
        
    }
    return result
}

        1.2.2 문제 리뷰
            babbling이라는 문자열로 이루어진 배열이 주어질때, 해당 문자열과 ["aya", "ye", "woo", "ma"]를 비교하여 같거나, 서로다른 문자열이 조합되어있는 단어의 갯수를 return 해야한다.
            우선 입력값과의 비교를 위해 defaultBabble을 만들어 기준 단어들을 배열로 만들어둔뒤, 결과를 수집할 result를 변수로 만들어 둔다.
            그런다음 입력값에 반복문을 실행하고, 여러 반복문과 조건문을 사용하는 동안 그것들을 컨트롤할 bool타입의 변수 valid를 만든다. 또 같은 문자가 연속해서 오는지 확인하기 위해 sameChar라는 빈 문자를 만든다. 
            첫 번째로 defaultBabble의 요소들로 시작을 하지않는 i는 발음 할수없는 단어이기에 valid를 false로 변경한다. 
            두 번째로 defaultBabble에 반복문을 실행해 i가 defaultBabble의 같은 값으로 합쳐져있는지 검사하고(같은 값 중복), 해당 될경우 역시 valid를 false로 변경한 후 break를 써서 반복문을 종료한다.
            세 번째로 valid가 아직 true상태라면 pandokgi라는 변수를 생성해 i의 첫번째 문자로 지정을 해두고, nil값에 대비해 " "빈 문자 선언도 해준다.
            그런다음 i의 각각의 문자에 대해 반복문을 실행하고(여기서 pandokgi변수를 i의 첫번째로 지정해 계산을 빠르게 한다.) middleChar를 i의 요소로 설정해둔 뒤, middleChar를 pandokgi에 넣고 pandokgi와 middleChar가 같아지면
            (같은 문자 중복) 역시 valid를 false로 바꾸고 반복문을 종료시킨다. 마지막까지 vaild가 true로 남아있으면 발음 가능한 단어이기에 result에 +1을 해주면 완성.

        1.2.3 개인적인 리뷰
            코드 테스트를 풀면서 문제마다 난이도의 곡선이 평이하다가 확오르고 평이하다가 확오르는 새로운 개념 및 복잡한 계산식 -> 복습 -> 새로운 개념 및 복잡한 계산식 -> 복습의 구간에서 난이도가 갑자기 오르는 구간의 느낌을 받았던 문제이다.
            단순히 문자열이나 배열의 요소를 비교하는 것 뿐만 아니라 배열의 문자열의 문자단위까지 검사해야하며 중복도 a + b는 허용하지만 a + a는 제외해야하는 등 많은 제약이 들어가있어야 하는 함수이고 반복문과 조건문의 반복, 기존에 썼던 함수와
            새로운 함수까지 사용해야 하기에(내가 풀었던 방식) 상당히 고전하게되는 문제였다.
            이 문제에서 알아야하는건 중복을 계산하는 다양한 방식중 문자 하나하나를 떼서 수집한 뒤 수집전의 문자와 비교하여 같은지를 확인하는 중복 계산식을 선택해서 공부했고, hasPreFix함수를 사용하여 해당하는 값의 접두어가 무엇인지 확인할 수 있는 함수도 배웠고,
            반복문에서 i + i 를 사용하여 간단하게 중복체크도 할수있다는걸 깨달았다. bool타입의 변수도 만들어서 간단하게 어떤 로직에 접근할때의 안전장치를 만들수있다는게 공부가 되었고, indices함수를 사용하여 문자열등을 문자단위로 분해하여 접근 할수도 있다는걸 배웠다.
            원래 코드 테스트를 하면서 적당히 느긋하게 문제를 푸는걸 선호해서 한 문제당 잡고있는 시간이 꽤 길지만, 이 문제는 집중해서 작성을 했는데도 상당한 시간이 소요되었다. 이런문제들이 정말 하고있을땐 골머리를 앓지만 풀고나면 엄청난
            카타르시스를  주는것같다. 앞으로도 이런 문제가 더욱 많아 질텐데 기대 반 걱정 반 되는 순간이었다.





















