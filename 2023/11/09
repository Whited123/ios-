2023 / 11 / 09

오늘 배운 것:

1. 코드 테스트
    1.1 푸드 파이트 대회
        1.1.1 코드
             import Foundation

             func solution(_ food:[Int]) -> String {
                 var result = ""
                 for (x, y) in food.enumerated() {
                     for _ in 0..<(y / 2) {
                         result += "\(x)"
                     }
                 }
                 let reverse = String(result.reversed())
                 result.append(reverse)
                 let plusZero = result.index(result.startIndex, offsetBy: result.count / 2)
                 result.insert("0", at: plusZero)
                 return result
             }

        1.1.2 문제 리뷰
             정수의 배열로 이루어진 입력값 food가 주어질 때, 배열의 첫번째 요소는 1로 고정되고, 배열의 두번째 요소부터 해당 값의 절반씩 문자열의 양옆에 추가하고, 마지막으로 "0"이 문자열의 중간에 있는 값을 반환해야한다.
             예를 들어 입력값 [1, 6, 4, 8]이 주어졌을때, 6을 2로 나누면 3이되고, "1"을 문자열의 양옆에 3번추가하며, 뒤의 요소들도 같은 과정을 반복하여 최종 문자열 "1112233330333322111"을 반환해야 한다.
             우선 result변수를 빈 문자열로 선언, enumerated함수를 이용한 튜플반복문을 사용하여 입력값의 순서와 해당 값을 가져온다.
             그런다음 이중반복문을 실행하고 해당 값을 2로 나눈 횟수만큼 result에 해당 값의 인덱스를 추가해 준다. (6을 2로나눈 횟수(3)만큼 해당 값의 인덱스(1)를 추가)
             그리고 result를 뒤집은 문자열을 reverse상수에 저장해주고, reverse를 result에 다시 더하여 "112233332211"과 같이 만들어 준다.
             마지막으로 plusZero상수를 만들어 result요소들의 중간으로 자리를 정해준 뒤 "0"을 더하고 result를 return해주면 완성.

        1.1.3 개인적인 리뷰
             입력값을 단순히 추가만 하는게 아니라 양끝에서부터 더해야하고, 배열의 첫번째요소 1이 중간에 "0"으로 들어가기 때문에 그 자체로 해결을 시도하면 난항을 겪을 수 있겠지만, 코드를 분할해서 하나하나 해결하면 쉽게 풀 수 있는거 같다.
             우선 숫자들을 추가하는 코드를 처리하는건 반복문을 이용해서 인덱스와 값을 가져와 해당 값을 반갈한 만큼 인덱스를 더해주면 완성되고, 그다음 reversed를 사용해서 기존의 문자열과 합쳐주면 양옆에 추가해야되는 과정도 처리되며,
             마지막으로 숯하게 써왔던 index함수를 이용한 위치조정문을 사용해서 0까지 중간에 추가해주면 손쉽게 완성이 된다.
             여러모로 그동안 써왔던 코드들을 복습하는 집합체같은 느낌을 받았고, 이중반복문, enumerated(), reversed(), index()...을 다시 한번 제대로 공부하는 문제가 된 것 같다.
             해당 값만큼 무언가를 더할 때 코드로 어떻게 표현해야 할지 고민을 했었는데, 단순히 반복문에 임의변수를 설정해주지않으면 해당되는 횟수만큼 코드가 자동으로 실행되는 공식을 써서 해결하는 것도 기억해두자!!!

    1.2 콜라 문제
        1.2.1 코드
            import Foundation

            func solution(_ a:Int, _ b:Int, _ n:Int) -> Int {
                var result = 0
                var changeN = n
                while changeN >= a {
                    let exchange = (changeN / a) * b
                    result += exchange
                    changeN = exchange + (changeN % a)
                    }
               return result
             }

        1.2.2 문제 리뷰
             콜라 빈 병 a개를 주면 새 콜라 b병을 받을 수 있다. n개의 빈병을 가지고 갔을때, 받은 콜라들을 계속 교환하여 최종적으로 몇개의 새 콜라를 받을 수 있는지 계산하는 함수를 만들어야 한다.
             우선 result변수를 Int타입으로 설정해놓고, changeN이라는 변수를 만들어 n을 수정가능한 변수화한다.
             while반복문을 실행하여 n의 갯수가 a보다 작아질때까지(콜라 교환이 불가능 할때까지) 반복하도록 설정 해놓는다.
             exchange상수를 만들어 n을 a로 나눈 몫에 b를 곱하는, 교환하고 받을 새 콜라를 저장하고, 그 값을 result에 추가한다. 그런다음 changeN변수를 exchange와 n을 a로 나눈 나머지를 더한 값으로 바꿔준다.
             changeN함수가 a보다 작아지면(콜라를 교환할 수 없을 때) result를 반환하면 완성.

        1.2.3 개인적인 리뷰
             코드는 간단하게 작성할 수 있지만 신경쓰지 않으면 놓칠 수도있는 부분이, 나눈 몫을 바로 저장하지 않고 b를 곱해주어야 한다.
             b가 1일 경우에는 따로 곱해주지 않아도 코드가 작동하지만, 받는 새 콜라가 2이상일 경우에는 해당 코드를 추가해 주어야 한다.
             그 외에는 입력값이 존재하고 반복되는 계산을 통해 입력값이 계속 줄어드는 형태의 문제는 입력값을 지금처럼 수정가능한 변수로 지정해 주어야 한다.  




















