2023 / 11 / 20 

정규과정이 시작되었다!! 열심히 배우고 익히자!

오늘 배운 것 : 

1. 코드테스트
    1.1 카드뭉치
        1.1.1 코드
            import Foundation

func jeaGuiHamSu(_ cards1:[String], _ cards2:[String], _ goal:[String], _ i1:Int, _ i2:Int, _ answer:Int) -> Bool {
    if goal.count == answer {
        return true
    }
    if i1 < cards1.count && cards1[i1] == goal[answer] {
        if jeaGuiHamSu(cards1, cards2, goal, i1 + 1, i2, answer + 1) {
            return true
        }
    }
    if i2 < cards2.count && cards2[i2] == goal[answer] {
        if jeaGuiHamSu(cards1, cards2, goal, i1, i2 + 1, answer + 1) {
            return true
        }
    }
    return false
}

func solution(_ cards1:[String], _ cards2:[String], _ goal:[String]) -> String {
    if jeaGuiHamSu(cards1, cards2, goal, 0, 0, 0) {
        return "Yes"
    } else {
        return "No"
    }
}

        1.1.2 코드 리뷰
            입력값으로 문자열을 담고 있는 배열 세개가 주어지고, cards1과, cards2의 각각의 요소들을 추출하여 입력값 goal의 형태를 만들 수 있을때 Yes를, 아니면 No를 반환해야 한다.
            우선 jeaGuiHamSu라는 재귀함수를 생성하고, solution의 입력값 세개를 받고 추가로 정수로된 입력값(i1: cards1의 인덱스, i2: cards2의 인덱스, answer: goal의 인덱스) 세개를 받는다.
            그런다음 if구문을 사용하여 i1, i2와 cards들의 크기를 비교하고, cards와 goal의 인덱스를 비교하여 같을 경우 해당되는 비교값에 + 1을 해준 뒤 다시 재귀함수를 호출한다.
            계속해서 함수를 호출하며 반복계산을 수행하고, goal의 count와 answer가 같아지면(배열이 완성되면) true를 반환하고, 조건문 어디에도 부합하지 않으면(순서대로 비교했을때 goal배열을 완성시킬 수 없음)false를 반환하며 함수를 종료한다.
            그런다음 solution함수에서 만들어둔 재귀함수를 호출하여 입력값과 정수 0을 입력하면 결과에 따라 Yes와 No를 반환시키며 완성.

        1.1.3 개인적인 리뷰
            이번에는 새로운 반복문 유형인 재귀함수에 대해 공부 할수있는 문제였다.
            재귀함수는 크게 두가지 특징이 있는데 첫 번째는 함수 내에서 반복계산을 하기위해서 재귀함수를 다시 호출해주어야 하며(재귀문), 두 번째는 조건을 만족했을때 반복을 종료하기 위한 베이스케이스가 있어야 한다는 것이다.
            재귀함수는 일반적인 반복문과는 다르게 입력값을 구체적으로 설정하여 디테일하게 계산을 수행할 수 있다. 반면 계산의 중간 결과값을 매번 저장하기때문에 계산이 길어지거나 재귀를 너무 많이 반복할 경우 오버플로우가 일어날 수있다는 단점도 있다.
                









