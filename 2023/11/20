2023 / 11 / 20 

정규과정이 시작되었다!! 열심히 배우고 익히자!

오늘 배운 것 : 

1. 코드테스트
    1.1 카드뭉치
        1.1.1 코드
            import Foundation

func jeaGuiHamSu(_ cards1:[String], _ cards2:[String], _ goal:[String], _ i1:Int, _ i2:Int, _ answer:Int) -> Bool {
    if goal.count == answer {
        return true
    }
    if i1 < cards1.count && cards1[i1] == goal[answer] {
        if jeaGuiHamSu(cards1, cards2, goal, i1 + 1, i2, answer + 1) {
            return true
        }
    }
    if i2 < cards2.count && cards2[i2] == goal[answer] {
        if jeaGuiHamSu(cards1, cards2, goal, i1, i2 + 1, answer + 1) {
            return true
        }
    }
    return false
}

func solution(_ cards1:[String], _ cards2:[String], _ goal:[String]) -> String {
    if jeaGuiHamSu(cards1, cards2, goal, 0, 0, 0) {
        return "Yes"
    } else {
        return "No"
    }
}

        1.1.2 코드 리뷰
            입력값으로 문자열을 담고 있는 배열 세개가 주어지고, cards1과, cards2의 각각의 요소들을 추출하여 입력값 goal의 형태를 만들 수 있을때 Yes를, 아니면 No를 반환해야 한다.
            우선 jeaGuiHamSu라는 재귀함수를 생성하고, solution의 입력값 세개를 받고 추가로 정수로된 입력값(i1: cards1의 인덱스, i2: cards2의 인덱스, answer: goal의 인덱스) 세개를 받는다.
            그런다음 if구문을 사용하여 i1, i2와 cards들의 크기를 비교하고, cards와 goal의 인덱스를 비교하여 같을 경우 해당되는 비교값에 + 1을 해준 뒤 다시 재귀함수를 호출한다.
            계속해서 함수를 호출하며 반복계산을 수행하고, goal의 count와 answer가 같아지면(배열이 완성되면) true를 반환하고, 조건문 어디에도 부합하지 않으면(순서대로 비교했을때 goal배열을 완성시킬 수 없음)false를 반환하며 함수를 종료한다.
            그런다음 solution함수에서 만들어둔 재귀함수를 호출하여 입력값과 정수 0을 입력하면 결과에 따라 Yes와 No를 반환시키며 완성.

        1.1.3 개인적인 리뷰
            이번에는 새로운 반복문 유형인 재귀함수에 대해 공부 할수있는 문제였다.
            재귀함수는 크게 두가지 특징이 있는데 첫 번째는 함수 내에서 반복계산을 하기위해서 재귀함수를 다시 호출해주어야 하며(재귀문), 두 번째는 조건을 만족했을때 반복을 종료하기 위한 베이스케이스가 있어야 한다는 것이다.
            재귀함수는 일반적인 반복문과는 다르게 입력값을 구체적으로 설정하여 디테일하게 계산을 수행할 수 있다. 반면 계산의 중간 결과값을 매번 저장하기때문에 계산이 길어지거나 재귀를 너무 많이 반복할 경우 오버플로우가 일어날 수있다는 단점도 있다.
                
    1.2 사과 포장
        1.2.1 코드
            import Foundation

func solution(_ k:Int, _ m:Int, _ score:[Int]) -> Int {
    var binBox = [Int]()
    var result = 0
    let reScore = score.sorted().reversed()
    for i in reScore {
        binBox.append(i)
        if binBox.count == m {
            let poJang = binBox.min()! * m
            result += poJang
            binBox = []
        }
    }
    return result
}

        1.2.2 문제 리뷰
            입력값 정수 k, m과 정수배열 score가 주어지고, score의 정수를 m만큼 묶어서 정리하는데 정리한 배열의 최솟값과 m을 곱한 값을 전부 더하여 최대의 숫자를 만들어야 한다.
            우선 binBox와 result 변수를 만들고 각각 빈 정수배열과 정수를 저장할 수있게 만든다.
            그리고 reScore상수를 만들어 score의 값을 내림차순으로 정렬하고, 반복문을 사용하여 binBox에 값들을 하나씩 넣고, 배열의 갯수가 m과 같아지면 poJang상수를 만들어 최솟값과 m을 곱한 뒤 result에 더하고 binBox를 빈배열로 초기화한다.
            반복문이 종료되고 result를 반환하면 완성.

        1.2.3 개인적인 리뷰
            입력값 k가 최고 품질의 사과 점수, m이 한 박스에 들어가는 사과의 갯수, score가 사과들의 품질이다.
            사실 k는 함수에서 내가 만든 함수에서는 다룰일이 없고, score를 내림차순으로 만든이유는 score의 값과 m의 값이 항상 나눠떨어지는 것은 아니기 때문에 고품질의 사과를 우선포장하여 이득을 최대화 하였다.
            min()함수를 사용했을때 옵셔널값에대해서도 빼먹지 말고 다루도록 하자.

    1.3 수포자
        1.3.1 코드
            import Foundation

func solution(_ answers:[Int]) -> [Int] {
    var result = [Int]()
    var result1 = 0
    var result2 = 0
    var result3 = 0
    let suPoZa1 = [1,2,3,4,5]
    let suPoZa2 = [2,1,2,3,2,4,2,5]
    let suPoZa3 = [3,3,1,1,2,2,4,4,5,5]
    for i in 0..<answers.count {
        if answers[i] == suPoZa1[i % suPoZa1.count] {
            result1 += 1
        }
        if answers[i] == suPoZa2[i % suPoZa2.count] {
            result2 += 1
        }
        if answers[i] == suPoZa3[i % suPoZa3.count] {
            result3 += 1
        }
    }
    let biGyo = max(result1, result2, result3)
    if biGyo == result1 {result.append(1)}
    if biGyo == result2 {result.append(2)}
    if biGyo == result3 {result.append(3)}
    return result
}

        1.3.2 문제 리뷰
            수포자 세명이 있는데 각각 고유한 패턴으로 문제들을 찍으려고 한다. 정답 입력값 answers가 정수배열로 주어질 때 누가 더 많이 맞췄는지를 정수배열로 반환하면 된다.
            우선 최종결과를 담을 정수배열 result를 만들어주고, 셋의 점수를 계산할 정수 변수 result1,2,3을 만든다.
            그런다음 셋의 고유한 패턴을 배열로 만들어주고 반복문을 실행하여 answers의 인덱스와 수포자들의 패턴 인덱스를 비교한다.
            비교해서 맞을 경우 1점을 더하고, 반복문이 끝나면 biGyo상수를 만들어 셋 중 가장 높은 점수를 선정하고, 조건문을 사용해서 result배열에다가 해당 수포자의 번호를 기입해주면 완성.

        1.3.3 개인적인 리뷰
            처음 반복되는 배열에 대해 어떻게 코드를 짤까 고민을 했었는데, Array함수와 flatMap함수를 이용해서 몇 차례 반복을 설정하였으나 코드가 난잡해질뿐더러 필요하지 않았다.
            대신 반복문에서 조건문을 사용할 때 i % suPoZa.count를 이용하여 나머지를 이용한 반복을 할수 있었고 훨씬 깔끔해지는 코드를 볼 수 있었다.
            또한 반복문을 설정할때 for i in answers라고 설정을 해둬서 정답의 값 자체를 가져와 버려서 suPoZa랑 비교하기가 힘들어져 코드가 제대로 작동하지 못하는 실수도 하였다..
            결국 기존의 계산식을 활용하여 문제를 풀었지만, 해당 문제처럼 반복을 설정하는 방법과 Array, flatMap에대해서 알 수 있는 문제였다.

    1.4 소수 만들기
        1.4.1 코드
             import Foundation

func soSu(_ n:Int) -> Bool {
    if n < 2 {
        return false
    }
    for i in 2..<n {
        if n % i == 0 {
            return false
        } 
    }
    return true
}

func solution(_ nums:[Int]) -> Int {
    var result = 0

    for i in 0..<nums.count {
        for x in i + 1..<nums.count {
            for y in x + 1..<nums.count {
                let triplePlus = nums[i] + nums[x] + nums[y]
                if soSu(triplePlus) {
                    result += 1
                }
            }
        }
    }

    return result
}

        1.4.2 문제 리뷰
             nums라는 정수로 이루어진 배열이 입력값이 될때, 정수 세개를 더해서 소수가 되는 숫자가 나오는 경우가 몇개인지 반환해야 한다.
             soSu라는 함수를 만들어서 소수를 구하는 공식을 만들고, solution에는 삼중반복문을 사용해서 계산식을 만든다.
             그런다음 만들어둔 함수에 계산식을 대입해 true를 반환하면 result에 +1을 해주면 완성.

        1.4.3 개인적인 리뷰
             코딩에서 소수를 구하는 방법은 여러가지가 있겠지만, 난 함수를 하나 만들고 해당함수를 2부터 n-1까지 차례대로 나눠보고, 나머지가 0이 되지않는 숫자를 찾는방법으로 구현했다.
             본 함수에서는 이전에도 사용한적이있었던 삼중반복문을 사용하여 중복없는 계산식을 구현했다. 이전까지의 복습문제라는 느낌을 받았다.
          














