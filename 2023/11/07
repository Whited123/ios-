2023/11/07 사전캠프 4주차 화요일

오늘 배운 것 :

1.코드테스트 풀기 
    1.1 시저암호 계산하기
        1.1.1 코드

         func solution(_ s:String, _ n:Int) -> String {
            var result = ""
            let abc = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            for i in s {
                if let alpha = abc.firstIndex(of: i) {
                    let alphaSet = abc.index(alpha, offsetBy: n % 26)
                    result.append(abc[alphaSet])
                } else if let beta = abc.lowercased().firstIndex(of: i) {
                    let betaSet = abc.lowercased().index(beta, offsetBy: n % 26)
                    result.append(abc[betaSet])
                } else if i == " " {
                    result.append(" ")
                }
            }
            return result
        }

        1.1.2 코드 리뷰

         알파벳 소문자, 대문자로 이루어진 입력값과 숫자로 이루어진 정수 입력값이 주어지면, 숫자만큼 알파벳을 뒤로 이동시킨 값을 반환하는 함수를 작성해야 한다.
         변수 result를 빈 String으로 선언해놓고, 대문자 알파벳 26자가 담긴 상수 abc를 생성한다.
         그리고 for in 구문을 사용해서 i를 s에 대입하고, 조건문을 사용하여 s가 대문자, 소문자, 공백일 경우에 대해서 처리한다.
         우선 대문자일 경우, alpha라는 상수를 만들어서 알파벳 모음 abc안에서 해당 문자를 찾게 하고, alphaSet이라는 상수를 만들어 상수 abc에 대해 index()함수를 사용, abc안의 해당 문자가 저장 된 alpha를 기준으로 하며, 
         n % 26만큼의 거리를 이동시킨다.
         그런다음 result에 abc[alphaSet]을 추가한다.
         소문자도 lowercased()함수를 사용하여 대문자와 똑같이 처리해주고, 공백의 경우 그대로 공백을 추가해준다. 그런다음 결과를 반환하면 완성.
       
        1.1.3 개인적인 리뷰

         처음 문제를 봤을 때 새로운 함수들이 등장할거라는 내 예상과는 다르게 구면인 함수들만 사용이 되었다.
         알파벳을 정리해놓은, 또는 비슷한 부류의 표준함수가 존재 할거라고 생각했었는데 직접 만들어서 사용해야 했다.
         x.firstIndex(of: y)함수는, x의 안에서 y를 찾는 함수다. x.index(y, offsetBy: z)는 x의 안에서 y를 기준으로 z만큼 이동한 요소를 나타내는 함수.
         alphaSet상수를 만들고 그걸 result에 append하는 과정에서 append(alphaSet)을 그대로 써도 괜찮지 않을까 생각했는데 컴파일 오류가 발생했고, 찾아보니 append(x)함수는 x의 타입이 Character(문자)여야 된다고 한다.
         alphaSet상수가 도출해내는 값은 String(문자열)이기 때문에 해당 코드처럼 abc[alphaSet]을 써서 해당 문자를 추출해내거나, result.append(Character(alphaSet))을 써서 타입 변환을 시켜줘야 한다.
         소문자를 처리하는 코드도 대문자와 동일하지만, 원한다면 소문자 모음의 알파벳 상수도 만들어서 사용할 수 있다.

    1.2 숫자 문자열과 영단어
        1.2.1 코드 
         import Foundation

          func solution(_ s:String) -> Int {
            var result = ""
            var word = ""
            let dict: [String:String] = [
              "one" : "1",
              "two" : "2",
              "three" : "3",
              "four" : "4",
              "five" : "5",
              "six" : "6",
              "seven" : "7",
              "eight" : "8",
              "nine" : "9",
              "zero" : "0",
          ]
          for i in s {
              if i.isNumber {
                  result.append(i)
              } else {
                  word.append(i)
                  if let words = dict[word] {
                      result.append(words)
                      word = ""
                  }
              }
         }
          return Int(result)!
      }

        1.2.2 문제 리뷰 
          입력값으로 숫자와 영어로 구성된 String타입의 s가 주어지면, 숫자는 그대로 반환하고 영어는 숫자로 변환한뒤 반환해야하는 문제다.
          우선 result와 word라는 빈 문자열의 변수를 생성한 후, 각각의 영단어에 대응되는 숫자를 적어놓은 Dictionary, dict 상수를 만든다.
          그런다음 반복문을 써서 입력값s를 순회하며, 만약 i가 숫자인경우에는 그대로 result에 추가하고, 영단어인 경우 만들어둔 빈 문자열 word에 해당 문자를 넣는다.
          그런다음 word에 들어가있는 영어문자를 조합하여 만들어진 단어가 dict의 요소와 일치하면, result에 대응되는 숫자를 더한 뒤 word를 빈 문자열로 초기화한다.
          반복문이 끝나고 result를 정수로 치환한 뒤 언래핑을 해주면 완성.

        1.2.3 개인적인 리뷰
          코드테스트중 딕셔너리가 처음 쓰인 문제같다.(이전 문제에서도 쓰려면 쓸 수 있었겠지만..?)
          딕셔너리를 사용해서 대응되는 숫자나 문자 등을 묶어서 다룰 수 있기 때문에 굉장히 간편한 기능인거같다.
          딕셔너리를 써도 숫자는 그대로 더하면 그만이지만, 문자같은 경우엔 갯수도 다르기 때문에 어떻게 처리해야 할지 고민을 했던거 같다.
          우선 문자 하나하나를 검사하기 때문에 빈 문자열을 만들어서 문자를 다 집어넣고, if구문을 써서 dict에 있는 단어와 일치하게 되면 대응되는 숫자를 추출해내고 문자열을 초기화하는 식으로 구성을 했다.
          마지막엔 result를 정수화하고 혹시모를 nil값에 대비하여 언래핑을 해주면 끝







































        
