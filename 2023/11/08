2023 / 11 / 08

오늘 배운 것 :

1. 코드 테스트
    1.1 k번째 수 정렬
        1.1.1 코드
            import Foundation

               func solution(_ array:[Int], _ commands:[[Int]]) -> [Int] {
                    var result:[Int] = []
                    for x in commands {
                         let i = x[0]
                         let j = x[1]
                         let k = x[2]
                         let array1 = array.index(array.startIndex, offsetBy: i - 1)
                         let array2 = array.index(array.startIndex, offsetBy: j - 1)
                         let setArray = array[array1...array2].sorted()
                         let answer = setArray.index(setArray.startIndex, offsetBy: k - 1)
                         result.append(setArray[answer])
                     }
                     return result
               }

        1.1.2 문제 리뷰
             정수로 이루어진 배열 array와 정수배열들을 갖고있는 배열인 2중배열 commands가 입력값으로 주어지고, commands안의 정수는 3개이고 각각 i, j, k라고 했을때 array의 i번째 요소에서 j번째 요소까지를 추출해낸후 오름차순으로
             정렬하고, 정렬된 배열의 k번째 요소를 반환해야하는 함수를 만들어야한다.
             우선 result 변수를 정수타입의 빈 배열로 설정, for in구문으로 commands를 순회하며 commands안의 배열안에 있는 세개의 정수를 각각 i, j, k로 지정한다.
             그런다음 array1, array2라는 상수를 만들고 array의 요소들중 i - 1번째 요소, j - 1번째 요소를 지정해 놓은뒤에 setArray상수에 둘을 조합하고 sorted()함수를 사용하여 정렬시킨다.
             그리고 setArray의 k - 1번째에 있는 요소를 추출 한 뒤 result에 추가해주면 완성.

        1.1.3 개인적인 리뷰
             문제를 언뜻 보면 복잡해보이지만 이전 테스트에 나왔던 함수들과 계산식을 숙지하고 있다면 어렵지 않게 풀 수 있는 복습 문제다.
             for in구문, index(x, offsetBy: y), sorted()등 이전에 배웠던 함수들을 활용하여 문제를 풀면서 해당 함수와 구문들에 대해 확실한 공부가 되었다.
             2중배열에 대한 루프문은 튜플 함수를 사용하면 오류가 발생하는데, 예를 들어 for (i, j, k) in 이중배열 {}로 코드를 작성했을 때 i, j, k가 이중배열([[1,2,3], [4,5,6], [7,8,9]])안의 배열들을 가리키는 경우와,
             배열안의 정수를 가리키는 2가지 경우가 존재하기 때문에 원하는 경우를 확실히 선언해 줄 필요가 있다!
             offsetBy: x - 1은 문제에서 가리키는 1번째, 2번째, ... 는 코드상에서 $0, %1...로 표현해야하기에 - 1을 붙히는걸 잊지말자. 

    1.2 두 개 뽑아서 더하기
       1.2.1 코드
            import Foundation

            func solution(_ numbers:[Int]) -> [Int] {
                var result = Set<Int>()
                for i in 0..<numbers.count {
                    for x in (i + 1)..<numbers.count {
                         let plus = numbers[i] + numbers[x]
                         result.insert(plus)
                         }
                    }
                  return Array(result).sorted()
                }

       1.2.2 문제 리뷰
           입력값으로 정수로 된 배열 numbers가 존재하고, 각각의 정수를 둘씩 더한뒤, 중복을 제거한 후 오름차순으로 반환해야한다.
           우선 result변수를 Set(Int)타입으로 설정을 해두고, 이중반복문을 실행하여 요소들을 둘씩 짝지어서 더하는 모든 경우의 수를 계산한다.
           그런다음 result에 해당 값을 더한 후에 result를 배열로 만들고, sorted함수를 사용하여 정렬까지 해주고 return 해주면 완성.
 
       1.2.3 개인적인 리뷰
           지난 테스트에서도 등장했던 이중반복문을 사용하여 어떠한 배열안의 정수를 둘씩 더하는 모든 경우의 수를 처리했고, 그 값을 반환하는 간단한 함수이지만 알아가야할 것이 많았다.
           우선 변수나 상수의 타입을 설정할때 Set이라는 타입이 처음 등장하였으며, Set은 중복되는 수를 제거해주는 타입이다. Int, String과 다른 분류의 타입이지만 저들과 같이 쓸 수 있다.
           주의할 점은 Set함수가 사용된 변수나 상수에 요소를 추가할때 append()가아닌 insert()함수를 사용해야 한다는 점이다.
           여기서 사용되는, Set타입에서 자체적으로 제공되는 메서드 insert()함수와 일반적인 배열에서 사용되는 insert(_ at:)함수는 비슷한 일을 하지만 엄연히 다른 함수이다.
           Set의 insert는 변수나 상수에 값을 추가하고 중복의 유무를 판별하고, insert(_ at:)함수는 배열에 요소를 지정한 위치에 추가하고, 중복을 허용한다는 차이가 있다.
           정리하자면 Set에서의 insert는 일반적으로 쓰는 append의 이름만 바꾼 것이고, 일반적인 배열에서의 insert(_ at:)는 append와는 다른 독자적인 함수다.
           이름을 똑같이 해놓으면 헷갈리지 않을까 싶었지만, 반대로 둘의 차이점을 숙지한다면 오히려 이름이 같기 때문에 더 직관적으로 알아볼 수도 있겠다는 생각이 들었다.
           var result = Set<Int>()구문은 var result: Set<Int> = []를 축약해서 표현 한 것이다.














