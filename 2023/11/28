2023 / 11 / 28

오늘 배운 것:

1. swift문법 강의 1-11~1-12
    오늘은 마지막 기초 문법강의의 상속과 초기화에 대해서 배웠다.
    상속은 클래스를 사용할때 한 클래스의 모든 메서드를 가져와서 사용하는 걸 의미하는데, 슈퍼 클래서인 부모 클래스와 그에 상속되어 부모 클래스의 요소를 사용할수있는 서브 클래스, 자식 클래스로 구분이 된다.
    초기화는 어떤 클래스 내에서 변수의 값을 인위적으로 초기화 시키는걸 의미하는데, init으로 사용하며 다른 상속클래스에서 사용할때 self.를 사용하여 값을 할당한다.

2. Calculator 만들기(1일차)
    
    2.1 더하기, 빼기, 나누기, 곱하기 연산을 수행할 수 있는 Calculator 클래스를 만들고, 클래스를 이용하여 연산을 진행하고 출력하기
        2.1.1 코드
            class Calculator {
    func plus(_ a: Double, _ b: Double) -> Double {
        return a + b
    }
    
    func bbelsem(_ a: Double, _ b: Double) -> Double {
        return a - b
    }
    
    func gopsem(_ a: Double, _ b: Double) -> Double {
        return a * b
    }
    
    func nanutsem(_ a: Double, _ b: Double) -> Double {
        guard b != 0 else {
            fatalError("0은 나눌 수 없습니다!!!")
        }
        return a / b
    }
}

let test = Calculator()
print(test.add(5, 3))
print(test.bbelsem(5, 3))
print(test.gopsem(5, 3))
print(test.nanutsem(5, 3))

        2.2.2 코드 설명 및 리뷰
            첫 번째 요구 사항인 기본적인 사칙연산을 수행할 수있는 계산기를 코드로 구현해보자.
            우선 Calculator라는 class를 만들어주고, 덧셈, 뺄셈, 곱셈, 나눗셈을 각각 함수로 만든뒤, Double타입의 입력값 a,b를 받고 결과값을 Double로 반환한다.
            각각의 함수는 +, -, *, /를 사용하여 값을 리턴해주는 간단한 계산식으로 이루어져 있고, 나눗셈의 경우에는 0을 나누려 할경우 return 0를 하려했으나 이후에 복잡한 계산기 로직을 구현했을때 문제를 일으킬수도 있을거같아
            코드에 오류가 생겼을때 경고문을 띄운 뒤 해당 로직을 강제 종료하는 함수 fatalError를 사용해서 0을 나눗셈하려 할경우에 대비하였다.
            기본적인 사칙연산을 코드로 구현하면 되기에 간단하게 풀수있는 step이었다.

    2.2 1에서 만든 Calculator 클래스에 추가 연산이 가능하도록 코드를 추가하고, 연산 진행 후 출력하기
        2.2.1 코드

            import UIKit

class Calculator {
    var result:Double = 0
    func plus(_ a:Double, _ b:Double) -> Double {
        let result = a + b
        self.result = result
        return result
    }
    
    func bbelsem(_ a:Double, _ b:Double) -> Double {
        let result = a - b
        self.result = result
        return result
    }
    
    func gopsem(_ a:Double, _ b:Double) -> Double {
        let result = a * b
        self.result = result
        return result
    }
    
    func nanutsem(_ a:Double, _ b:Double) -> Double {
        guard b != 0 else {
            fatalError("0으로는 나눌 수 없습니다!!!")
        }
        let result = a / b
        self.result = result
        return result
    }
    func reset() {
        result = 0
    }
}

let test = Calculator()
print(test.plus(1, 2)) // 3
print(test.bbelsem(test.result, 1)) // 2, 전의 연산 결과값에 그대로 계산
print(test.gopsem(test.result, 5)) // 10
test.reset() // AC 버튼, 연산값 0으로 초기화
print(test.plus(test.result, 4)) // 4

        2.2.2 코드 해석 및 리뷰
            이전 단계에 이어서 계산기의 디폴트세팅인 결과값에 계속해서 연산을 수행하는 작업을 코드로 구현했고 추가로 AC버튼의 기능을 구현해 보았다.
            우선 Calculator안에 결과값을 저장할 result를 변수로 만들어두고, 각각의 함수안에는 같은 이름의 상수를 만들어 결과값을 담는다. 그런다음 self.를 사용하여 밖의 result값에 상수 result의 값을 더하여 결과값을 저장한다.
            reset()함수를 만들어 result의 값을 0으로 리셋시키고 test.reset()을 하면 0으로 초기화되면서 AC버튼의 기능도 구현하였다.
            이번에는 각기 다른 result변수 상수를 만들어 변수에 계산 결과값을 지속적으로 업데이트 하고, 상수에는 함수안에서 자체적으로 계산을 하도록 만들었다. 역시 어려운 부분없이 쉽게 만들수있었다.

3. 코드 테스트 
    3.1 문자열 나누기
        3.1.1 코드
            import Foundation

func solution(_ s:String) -> Int {
    var result = 0
    var sIndex = s.startIndex
    while sIndex < s.endIndex {
        var countX = 0
        var countNameozi = 0
        let firstChar = s[sIndex]
        var sIndex2 = sIndex
        while sIndex2 < s.endIndex {
            let sIndexChar = s[sIndex2]
            if firstChar == sIndexChar {
                countX += 1
            } else {
                countNameozi += 1
            }
            if countX == countNameozi {
                result += 1
                sIndex = s.index(after: sIndex2)
                break
            }
            sIndex2 = s.index(after: sIndex2)
        }
        if countX != countNameozi {
                result += 1
                break
    }
}
    return result
}

          3.1.2 코드 리뷰
              입력값 문자열 s가 주어질때 해당 문자열을 분리하는데, 첫번재 문자의 등장횟수와 그 외의 문자의 등장횟수를 기록하고 해당 count가 같아질때 문자열을 분리한다. 이런 방식으로 문자열을 끝까지 분리하며 분리된 횟수를 return 해야한다.
              우선 result와 sIndex를 만들어서 각각 결과값과 s의 시작 인덱스를 저장하고 첫번째 while구문을 실행한다. <기호를 사용하여 sIndex를 기준으로 s의 끝까지 순회하게 조건을 설정해준다.
              countX와 countNameozi를 만들어 문자들의 횟수를 저장하게끔 만들고, 상수 firstChar를 만들어 s의 각문자들을 표시한다. 두번째 while구문을 반복하기 위해 마찬가지로 sIndex2를 만들어 sIndex의 내용을 그대로 넣어준다.
              그리고 두번째 while구문을 첫번째와 마찬가지로 s의 끝까지 순회하게 만들고, s의 각문자를 나타내는 상수 sIndexChar를 만들고 조건문을 사용하여 sIndexChar와 firstChar를 비교한다(첫번째 문자와 그다음 문자의 비교).
              일치할 경우 countX를 +1해주고, 다를 경우 countNameozi를 +1해준다. 그리고 countX와 countNameozi가 같을경우 result에 +1을 해주고 첫번째 반복문의 기준인 sIndex의 값을 s의 문자중 마지막으로 비교한 두번째반복문의 sIndex2의 다음으로 설정하고 반복문을 종료한다.
              조건문 모두에 해당하지않는다면 sIndex2의 값을 sIndex2다음으로 설정해준 뒤 반복문을 계속 진행한다. 그런 다음 결과값을 return해주면 마무리.

          3.1.3 개인적인 리뷰
              문자열이 주어질때 단순히 일반적으로 반복문을 실행해서 첫번재 문자와 그 다음 문자들의 비교를 해보고, 카운트를 기준으로도 비교를 해봤지만 단순히 전체를 봤을때 비교를 하는게 아닌 최초 등장 문자와 그 외의 문자의 등장횟수를 비교하여 문제풀이를
              진행해야하기에 반복문을 중첩하여 접근하는 방식을 시도하였다.
              첫번째 반복문에서는 s전체 문자를 대상으로 하나하나씩 순회하였고, 두번째 반복문에서도 마찬가지로 범위를 설정한다음, 첫번째와 반복문에서 설정해놓은 변수와 상수를 두번째에서도 같이 설정하고 진행하였으며, 두번째반복문에서 s의 시작값과 다른값의 횟수가 같아질때(분리 시점),
              첫번째반복문의 순회값을 두번째 반복문에서 마지막으로 불러온 문자 다음으로 위치해줌으로써 문자열의 분리 및 횟수 카운트를 구현했다.
              같은 변수와 상수, 값들이 반복되기때문에 얼핏보면 헷갈리고 복잡해 보일수있지만, 코드를 하나하나 직접 입력값을 대입해보며 로직을 실행해보면 이해하기 어렵지않다. 어떤 배열이나 문자열을 분리하여 따로 계산하는 방법에 대해 배웠다.
              이 문제에서는 비록 이중 반복문을 사용해서 문제를 한단계 복잡하게 만들어놨지만 다루는 값은 둘모두 동일하기에 이러한 유형의 문제를 풀고 적응하고 입문하는데에 적합한 난이도라고 생각했다.
              나중에 2중, 3중반복문을 실행하여 각각의 반복문이 다른 값들을 다루고 그것들을 연결해야 하는 구간에서는 난이도가 더욱 올라갈것이기에 그때가서 헤매지말게 잘 숙지해두자!
              






