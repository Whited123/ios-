2023 / 11 / 29

오늘 배운 것:

1. 코드 테스트
    1.1 대충 만든 자판
        1.1.1 코드
            import Foundation

func buttonPressCount(_ keymap:[String], _ target:String) -> Int {
    if target.isEmpty {
        return 0
    }
    var countResult = Int.max
    for key in keymap {
        if let index = key.firstIndex(of: target.first!) {
            let distance = key.distance(from: key.startIndex, to: index) + 1
            let removeFirst = String(target.dropFirst())
            let countMin = distance + buttonPressCount(keymap, removeFirst)
            countResult = min(countResult, countMin)
        }
    }
    return countResult == Int.max ? -1 : countResult
}

func solution(_ keymap:[String], _ targets:[String]) -> [Int] {
    var result = [Int]()
    for target in targets {
        let count = buttonPressCount(keymap, target)
        result.append(count)
    }
    return result
}

       1.1.2 코드 리뷰
            입력값 keymap과 targets가 문자열 타입의 배열로 주어질때, keymap에 있는 문자열들로 targets의 문자열을 만들려고 할때 오름차순으로 횟수를 세어 가장 적은 수로 targets의 문자열을 완성할수있는 횟수를 담아 리턴해야한다.
            우선 result변수를 만들어 최종결과값을 담을 정수타입의 배열로 초기화를 시키고, targets배열에 반복문을 실행하여 문자열 각각을 target으로 가져온다.
            그런다음 count상수를 만들어 buttonPressCount라는 재귀함수에 keymap과 target을 입력값으로 넣은 값을 담는다.
            buttonPressCount함수는 입력값으로 keymap과 target을 받고 이를 정수로 return 한다.
            countResult라는 변수를 만들어 최대의 정수로 값을 세팅해놓고, keymap의 문자열각각을 key로 불러온다.
            if let구문을 실행하여 index라는 상수를 만들어 key에서 target의 첫문자가 겹치는 부분을 표시하고, distance상수를 만들어 key의 첫문자부터 target과 겹치는 문자간의 거리를 계산하고 해당 값에 +1을 해준다(버튼이 눌리는 횟수를 표현).
            그런다음 removeFirst 상수를 만들어 겹치는 문자를 찾은 target의 첫문자를 제거한 값을 담아주고, countMin상수에 재귀 함수를 keymap과 첫문자를 뗀 removeFirst를 입력값으로 주고 다시 실행시키며, 모든 반복이 종료된후 반환된값을 겹치는값을 찾기위해 버튼을 몇번 눌러야하는지 기록해둔 값과 합친다.
            그리고 countResult의 값을 갱신시키는데 기존의 최대정수와 countMin중 더 작은 숫자를 담아주고, countResult가 여전히 최대정수라면(겹치는 문자가 하나도 없었을 경우), -1을 리턴하고 아니면 countMin을 리턴한다.
            targets의 모든 문자열에대해 해당 로직을 실행시키며 해당 값을 count에 담아주고 result를 return 해주면 마무리.

      1.1.3 개인적인 리뷰
            갯수가 정해지지않은 두개의 문자열을 담은 배열이 주어지고 각각 하나의 표본이 아닌 여러개의 문자열들을 비교해서 겹치는 문자가 가장 앞에 있는 문자열에서의 횟수를 더해야하는 구문만 봐도 상당히 복잡한 문제이다.
            처음에는 이중반복문 for in구문과 while구문을 사용하여 문제 풀이를 시도 하였으나 세분화 해야하는 부분이 너무많아서(문자열을 담은 배열이 두개가 주어지고 갯수에도 제한이 없으며 문자열이 가지고 있는 문자도 다 다르다.) 코드가 상당히 복잡해지고
            짜고있는 동안에도 헷갈릴만큼 복잡해졌기에 더 알아보기 쉽게 할수있는 방법을 고심하던중 저번에 배웠던 재귀함수를 활용해보기로 하였다.
            원래의 solution함수에서 1차적으로 반복문을 사용하여 targets에서 독립된 문자열을 추출하는데 성공하였고, 재귀함수에는 문자열 하나에 대해서 단방향으로 생각만 하면 되기에 훨씬 수월해졌다.
            Int.max라는 값은 말그대로 정수중 최고값을 뜻하는 구문으로 값의 크기를 가늠할수없는데 크기비교를 해야하는경우 표기해줄수있는 간단한 표시법이다.
            재귀함수내에서 다시 반복문을 사용하여 keymap에서도 독립적인 문자열을 추출하였고 target의 첫번째 문자를 비교하고 겹치는 문자와 그 거리를 찾으면 문자를 떼어버리고 재귀함수를 다시한번 실행시켰다. for in구문이나 while에서 썼던 break를 다르게 쓰는 느낌이었다.
            distance함수는 값들간의 거리를 계산해주는 함수다. +1을 한이유는 첫번째문자여도 버튼을 한번은 눌러야하기때문이다.
            갈수록 문제들이 더어려워진다. 나중에는 한문제를 푸는데만 몇시간이 소요될지도 모르겠다.
           
2. 계산기 
    2.1 세번째 로직 구현
        세번째 로직을 오늘 구현하려했으나 80퍼센트 정도 완성시키고 다만들진 못했다. ㅠㅠ
        내일 세번째와 네번째를 완성해야겠다.








