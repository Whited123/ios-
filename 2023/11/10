2023 / 11 / 10

오늘 배운 것:

1.코드 테스트
    1.1.명예의 전당
        1.1.1 코드
             import Foundation

             func solution(_ k:Int, _ score:[Int]) -> [Int] {
                  var result = [Int]()
                  var jundang = [Int]()
                  for i in score {
                      if jundang.count == k {
                      if let caution = jundang.min(), i > caution {
                              jundang.removeFirst()
                              jundang.append(i)
                           }
                         result.append(jundang.min()!)
                         jundang = jundang.sorted()            
                      } else {
                        jundang.append(i)
                        result.append(jundang.min()!)
                        jundang = jundang.sorted()
                      }
                  }
                  return result
             }
             
        1.1.2.문제 리뷰
             정수로 이루어진 배열 score와 정수 k가 입력값으로 주어질 때, 빈 배열에 score의 값을 정수 k만큼 차례대로 추가하고, 매번 추가할때마다 최솟값을 갱신하여 모든 score를 배열에 집어넣었을때 각각의 경우의 최솟값을 모은 배열을 반환해야 한다.
             우선 result와 jundang변수를 만들어 각각 최솟값 기록, k만큼의 score를 추가하고 계산을 수행을 하는 정수 타입의 빈 배열로 선언한다. 
             score에 대해 반복문을 실행하고, 첫번째 if조건문(jundang에 넣은 입력값의 숫자가 k를 넘어가는지를 구분)을 만들고 jundang에 score의 값들을 차례대로 넣으면서 개중 최솟값을 result에 추가하고, jundang을 오름차순으로 정렬한다.
             jundang의 count가 k를 넘어가게 되면 정렬해놓은 jundang의 첫번째 요소(최소값)과 i의 크기를 비교하고, i가 클 경우 jundang의 첫번째 요소를 삭제하고 i를 추가한다.
             그런 다음 마찬가지로 최솟값을 result에 추가 후 jundang을 정렬해주고, 반복문이 끝난 뒤 result를 반환하면 완성.

        1.1.3 개인적인 리뷰
             우선 지난 테스트들과 마찬가지로 한번에 모든 계산식을 수행하기보단 하나씩 처리하기 위해 코드를 작성 해나갔다.
             전당에 k의 값만큼 배열을 채우고, 그과정에서 result.append()안에 어차피 정렬을 하기 때문에 최솟값은 첫번째값이 될거라고 판단해서 jundang[0]을 썼었는데, 배열이 비어있는 경우나 정렬이 필요한 경우에 런타임 오류가 발생할 수 있기 때문에
             min()함수를 써서 최소값을 가져오고, nil값은 없다고 판단해 강제 언래핑(!)을 해주었다.
             두번째 조건문인 i와 배열의 최솟값을 비교하는 구문이 없다면 현재 배열의 최솟값이 삭제되고 그보다 더작은 최솟값이 jundang에 추가되기때문에 주의. score중 가장 큰 수 k개수만 jundang에 저장해야 한다.
             마지막으로 오타를 항상 조심하자. jundang의 배열을 정렬하는 과정에서 jundang이 아닌 result를 넣어놓고 결과값에 납득하지 못해 20분이상의 시간을 낭비하지 말자...
 
    1.2 2016년
        1.2.1 코드
              import Foundation

               func solution(_ a:Int, _ b:Int) -> String {
               let weekdays = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"]
               var totalD = 0
               let cal2016 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
               for i in 1..<a {
                     totalD += cal2016[i - 1]
                }
               totalD += b - 1
               let answer = (5 + totalD) % 7
               return weekdays[answer]
                }

        1.2.2 문제 리뷰
             2016년 1월 1일 금요일을 기준으로 2016년 a월 b일은 무슨 요일인지를 반환하는 함수를 만들어야 한다.
             우선 weekdays, cal2016상수를 만들어 요일과 2016년의 각 달의 일자를 저장해주고, 날짜를 덧셈할 변수 totalD를 생성한다.
             반복문을 사용하여 1부터 a-1을 cal2016의 인덱스로 넣어 totalD에 더해주고, b에서 1을 뺀 숫자를 또 더해준다.
             그런 다음 금요일이 기준이니 totalD에 금요일의 인덱스인 5를 더해주고, 요일의 갯수 7로 나눈 나머지를 answer상수에 저장한다.
             그런다음 해당값을 만들어둔 상수 weekdays에 넣어 인덱스를 추출해주면 완성.

        1.2.3 개인적인 리뷰
             우선 처음 보고 자바스크립트에서도 쓰이는 Date함수들을 이용하여 풀려고 시도 해보았으나 처음 겪는 함수들이 많았고 해당 함수들이 다루는 객체들도 다양하다보니 쉽지않았다.
             그래서 노선을 변경해 일반적인 계산식으로(달리 말하면 노가다) 계산을 하였고, 가장 미니멀한 방법인 만큼 코드도 수월하게 짤 수 있었다.
             위의 단순히 원래 알던 계산식을 이용해 코드를 짜는것도 공부가되지만 새로운 함수들을 사용하고 응용해서 풀어야 좀 더 익숙해지고 내것이 늘어날텐데 하고 생각했다.
             Date함수등에 대해서 좀 더 개인적인 공부를 따로 해봐야 할 것이다.

















                                              
            




























